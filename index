<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Brick Breaker Neumórfico — Cumple 23</title>
  <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    :root{
      --bg: #e0d6e8;
      --panel: #dfd4e6;
      --accent-text: #4b3144;
      --soft-shadow: rgba(0,0,0,0.06);
      --soft-highlight: rgba(255,255,255,0.85);
      --paddle-pink: #e88aa8;
      --hud-bg: #dacfe3;
    }
    * { margin:0; padding:0; box-sizing:border-box }
    html, body { width:100%; height:100%; overflow:hidden; background:var(--bg); font-family:'Plus Jakarta Sans',sans-serif }
    canvas {
      display:block;
      border-radius:24px;
      box-shadow:
        inset 8px 8px 16px var(--soft-shadow),
        inset -8px -8px 16px var(--soft-highlight);
      touch-action: none; /* <-- evita scroll/zoom al tocar el canvas */
    }
    #startScreen, #overlay {
      position:absolute; top:0; left:0;
      width:100%; height:100%;
      background: rgba(224,214,232,0.95);
      display:flex; align-items:center; justify-content:center;
      z-index:10; padding:1rem;
    }
    #startScreen .modal, #overlay .modal {
      background:var(--panel); border-radius:24px; padding:1rem;
      text-align:center; max-width:930px; width:96%;
      box-shadow: 8px 8px 18px var(--soft-shadow), -6px -6px 14px var(--soft-highlight);
      transform:scale(0.96);
      animation:popIn .36s forwards;
      display:flex; flex-direction:column; align-items:center; gap:0.9rem;
    }
    @keyframes popIn { to { transform:scale(1) } }
    #startScreen h1 { color:var(--accent-text); font-size:1.6rem; margin-bottom:0.4rem; font-family: 'Comic Sans MS', sans-serif; }
    #startBtn, #btnRestart {
      background:#edd0e0; border:none; padding:.75rem 1.5rem; border-radius:16px;
      font-weight:700; color:var(--accent-text); cursor:pointer;
      box-shadow: 6px 6px 12px rgba(0,0,0,0.06), -6px -6px 12px rgba(255,255,255,0.85);
      transition:transform .18s, box-shadow .18s, filter .18s; font-family: 'Comic Sans MS', sans-serif;
    }
    #startBtn:hover, #btnRestart:hover { transform:translateY(-2px); filter:brightness(.98); }
    #mainTitle {
      position:absolute; top:1rem; left:50%; transform:translateX(-50%);
      color:var(--accent-text); font-size:1.4rem; font-weight:700; z-index:5;
    }
    #hud {
      position:absolute; top:4rem; left:50%; transform:translateX(-50%);
      display:flex; gap:1rem; background:var(--hud-bg); padding:0.5rem 1rem; border-radius:24px;
      box-shadow: 6px 6px 12px rgba(0,0,0,0.06), -6px -6px 12px rgba(255,255,255,0.85);
      font-weight:700; color:var(--accent-text); z-index:5;
    }
    #overlay { visibility:hidden; opacity:0; transition:opacity .38s ease, visibility .38s ease; }
    #overlay.show { visibility:visible; opacity:1 }
    #overlay img { width:100%; max-width:820px; max-height:70vh; border-radius:12px; object-fit:contain; display:block; transform-origin:center center; opacity:0; transform:scale(.96); }
    @keyframes imgPop { from { opacity:0; transform:scale(.92); } 60% { opacity:1; transform:scale(1.02); } to { opacity:1; transform:scale(1); } }
    .img-zoom { animation: imgPop .48s cubic-bezier(.2,.9,.2,1) forwards; }
    #overlay h2 { color:var(--accent-text); font-weight:800; margin:0.6rem 0 0.2rem; text-align:center; }
    #overlay p  { color:#5f5266; margin:0 0 1rem; line-height:1.4; text-align:center; max-width:86%; }
    @media (min-width: 800px) and (max-width: 1366px){
      #overlay img { max-width:920px; max-height:76vh; }
      #startScreen .modal, #overlay .modal { max-width:980px; padding:0.9rem; }
    }
    @media (max-width:560px){
      #overlay img { max-height:50vh; max-width:92vw; border-radius:12px; }
      #overlay .modal { padding:0.8rem; gap:0.6rem; }
    }
  </style>
</head>
<body>

  <div id="startScreen">
    <div class="modal">
      <h1>Llega a 23 para desbloquear una razón</h1>
      <button id="startBtn">Iniciar juego</button>
    </div>
  </div>

  <div id="mainTitle">Llega a 23 para desbloquear una razón</div>
  <canvas id="game"></canvas>
  <div id="hud">
    <div id="scoreText">Score: 0/23</div>
    <div id="livesText">Lives: 3</div>
  </div>

  <div id="overlay">
    <div class="modal">
      <img id="winImg" src="" alt="¡Felicidades!" style="display:none"/>
      <h2 id="msgTitle"></h2>
      <p id="msgText"></p>
      <button id="btnRestart">Volver a jugar</button>
    </div>
  </div>

  <script>
  // CONFIG
  const TARGET    = 23;
  const HIT_SOUND = 'hit.mp3';
  const WIN_SOUND = 'win.mp3';
  const LOSE_SOUND= 'lose.mp3';
  const WIN_IMAGE = 'no se que.png';

  // Canvas retina-aware
  const canvas = document.getElementById('game'),
        ctx    = canvas.getContext('2d'),
        dpr    = devicePixelRatio || 1;
  function resize(){
    canvas.width  = innerWidth * dpr;
    canvas.height = innerHeight * dpr;
    canvas.style.width  = innerWidth + 'px';
    canvas.style.height = innerHeight + 'px';
    ctx.setTransform(dpr,0,0,dpr,0,0);
  }
  window.addEventListener('resize', resize);
  window.addEventListener('orientationchange', ()=> setTimeout(resize,120));
  resize();

  // Sonidos
  const sfxHit  = new Audio(HIT_SOUND),
        sfxWin  = new Audio(WIN_SOUND),
        sfxLose = new Audio(LOSE_SOUND);

  // Estado
  let score=0, lives=3, playing=false, confettiActive=false;
  let ball, paddle, bricks;
  let left=false, right=false;

  // Confetti
  const confetti=[];
  function spawnConfetti(){
    for(let i=0;i<200;i++){
      confetti.push({
        x: Math.random()*innerWidth,
        y: Math.random()*-innerHeight,
        vx: (Math.random()-0.5)*2,
        vy: 2 + Math.random()*3,
        size: 6 + Math.random()*6,
        color: `hsl(${Math.random()*360},55%,70%)`,
        rot: Math.random()*Math.PI*2,
        vrot: (Math.random()-0.5)*0.1
      });
    }
  }
  function updateConfetti(){
    confetti.forEach(c=>{ c.x+=c.vx; c.y+=c.vy; c.rot+=c.vrot; if(c.y>innerHeight) c.y=-10; });
  }
  function drawConfetti(){
    confetti.forEach(c=>{
      ctx.save(); ctx.translate(c.x,c.y); ctx.rotate(c.rot); ctx.fillStyle=c.color;
      ctx.fillRect(-c.size/2,-c.size/2,c.size,c.size*0.45); ctx.restore();
    });
  }

  // DOM refs
  const startScreen = document.getElementById('startScreen'),
        startBtn     = document.getElementById('startBtn'),
        hudScore     = document.getElementById('scoreText'),
        hudLives     = document.getElementById('livesText'),
        overlay      = document.getElementById('overlay'),
        title        = document.getElementById('msgTitle'),
        text         = document.getElementById('msgText'),
        img          = document.getElementById('winImg'),
        btnRestart   = document.getElementById('btnRestart');

  startBtn.onclick   = () => { startScreen.style.display='none'; init(); };
  btnRestart.onclick = init;

  // Teclado
  document.addEventListener('keydown', e=>{
    if(e.key==='ArrowLeft') left=true;
    if(e.key==='ArrowRight') right=true;
  });
  document.addEventListener('keyup', e=>{
    if(e.key==='ArrowLeft') left=false;
    if(e.key==='ArrowRight') right=false;
  });

  // Detectar touch
  const isTouchDevice = ('ontouchstart' in window) || navigator.maxTouchPoints > 0;

  // Mover paleta a posición X del cliente
  function movePaddleTo(clientX){
    if(!paddle) return;
    const newX = clientX - paddle.w/2;
    paddle.x = Math.max(0, Math.min(innerWidth - paddle.w, newX));
  }

  // CONTROL TÁCTIL DIRECTO: tocar mueve al instante; arrastrar sigue la posición.
  // Usamos Pointer API (unifica touch/mouse/pen). También añadimos fallback touch events para compatibilidad.
  let touchActive = false;

  // Pointer handlers
  canvas.addEventListener('pointerdown', (e)=>{
    // aceptar touch y pen; también aceptar mouse si quieres probar con clic
    e.preventDefault();
    touchActive = true;
    movePaddleTo(e.clientX);
  }, {passive:false});

  canvas.addEventListener('pointermove', (e)=>{
    if(!touchActive) return;
    e.preventDefault();
    movePaddleTo(e.clientX);
  }, {passive:false});

  window.addEventListener('pointerup', (e)=>{
    if(!touchActive) return;
    touchActive = false;
  });

  // Fallback touch-only (algunos navegadores)
  canvas.addEventListener('touchstart', (ev) => {
    ev.preventDefault();
    touchActive = true;
    const t = ev.touches[0];
    if(t) movePaddleTo(t.clientX);
  }, {passive:false});
  canvas.addEventListener('touchmove', (ev) => {
    ev.preventDefault();
    const t = ev.touches[0];
    if(t) movePaddleTo(t.clientX);
  }, {passive:false});
  canvas.addEventListener('touchend', (ev) => {
    touchActive = false;
  }, {passive:false});

  // Inicializar juego
  function init(){
    score=0; lives=3; playing=true; confettiActive=false; confetti.length=0;
    hudScore.textContent=`Score: 0/${TARGET}`;
    hudLives.textContent=`Lives: 3`;
    overlay.classList.remove('show');
    img.style.display = 'none'; img.src = ''; img.classList.remove('img-zoom');
    title.textContent = ''; text.textContent = '';

    const W = innerWidth;
    paddle = { w: W*0.15, h:12, x:(W-W*0.15)/2, speed:8 };
    ball = { r:10, x:W/2, y:innerHeight-60, vx:4*(Math.random()>0.5?1:-1), vy:-4 };

    bricks=[]; let idx=0;
    const cols=5, rows=5, pad=12;
    const bw=(W-pad*(cols+1))/cols, bh=24;
    for(let r=0;r<rows;r++){
      for(let c=0;c<cols;c++){
        bricks.push({ x:pad + c*(bw+pad), y:80 + r*(bh+pad), w:bw, h:bh, active: idx<TARGET, hue:300 - r*20 });
        idx++;
      }
    }
    resize(); requestAnimationFrame(loop);
  }

  // Colisión círculo-rect
  function collide(b,r){
    const cx=Math.max(r.x, Math.min(b.x, r.x+r.w)),
          cy=Math.max(r.y, Math.min(b.y, r.y+r.h)),
          dx=b.x-cx, dy=b.y-cy;
    return dx*dx+dy*dy < b.r*b.r;
  }

  // Draw
  function draw(){
    ctx.clearRect(0,0,innerWidth,innerHeight);
    if(confettiActive) drawConfetti();
    bricks.forEach(b=>{
      if(!b.active) return;
      ctx.fillStyle=`hsl(${b.hue},60%,70%)`;
      roundRect(ctx,b.x,b.y,b.w,b.h,12); ctx.fill();
      ctx.strokeStyle=`hsl(${b.hue},50%,60%)`; ctx.lineWidth=2; ctx.stroke();
    });
    ctx.fillStyle='var(--paddle-pink)';
    roundRect(ctx, paddle.x, innerHeight-40, paddle.w, paddle.h, 8); ctx.fill();
    ctx.beginPath(); ctx.fillStyle='#fff'; ctx.arc(ball.x, ball.y, ball.r, 0, Math.PI*2); ctx.fill();
  }

  // Update physics
  function update(){
    if(playing){
      // Si hay interacción táctil activa, priorizamos el touch directo (no aplicar teclado)
      if(!touchActive){
        if(left)  paddle.x=Math.max(0,paddle.x-paddle.speed);
        if(right) paddle.x=Math.min(innerWidth-paddle.w,paddle.x+paddle.speed);
      }
      paddle.x = Math.max(0, Math.min(innerWidth - paddle.w, paddle.x));

      ball.x+=ball.vx; ball.y+=ball.vy;
      if(ball.x+ball.r>innerWidth||ball.x-ball.r<0) ball.vx*=-1;
      if(ball.y-ball.r<0) ball.vy*=-1;

      if(collide(ball,{x:paddle.x,y:innerHeight-40,w:paddle.w,h:paddle.h}) && ball.vy>0){
        ball.vy*=-1;
        const hit=(ball.x-(paddle.x+paddle.w/2))/(paddle.w/2), speed=Math.hypot(ball.vx,ball.vy);
        ball.vx=speed*hit; ball.vy=-Math.abs(speed);
      }

      for(const b of bricks){
        if(b.active && collide(ball,b)){
          b.active=false; ball.vy*=-1;
          score++; hudScore.textContent=`Score: ${score}/${TARGET}`;
          sfxHit.currentTime=0; sfxHit.play().catch(()=>{});
          if(score>=TARGET) return win();
          break;
        }
      }

      if(ball.y-ball.r>innerHeight){
        lives--; hudLives.textContent=`Lives: ${lives}`;
        if(lives<=0) return lose();
        ball.x=innerWidth/2; ball.y=innerHeight-60;
        ball.vx=4*(Math.random()>0.5?1:-1); ball.vy=-4;
      }
    }
    if(confettiActive) updateConfetti();
  }

  // Loop
  function loop(){
    update(); draw();
    requestAnimationFrame(loop);
  }

  // Helper roundRect
  function roundRect(ctx,x,y,w,h,r){
    ctx.beginPath();
    ctx.moveTo(x+r,y);
    ctx.arcTo(x+w,y,  x+w,y+r, r);
    ctx.arcTo(x+w,y+h,x+w-r,y+h, r);
    ctx.arcTo(x,y+h,  x,y+h-r, r);
    ctx.arcTo(x,y,    x+r,y,   r);
    ctx.closePath();
  }

  // Win / Lose
  function win(){
    playing=false; spawnConfetti(); confettiActive=true;
    img.src = WIN_IMAGE; img.style.display = 'block'; img.classList.remove('img-zoom'); void img.offsetWidth; img.classList.add('img-zoom');
    sfxWin.play().catch(()=>{}); overlay.classList.add('show');
  }
  function lose(){
    playing=false;
    title.textContent='Perdiste :('; text.textContent=`No llegaste a ${TARGET}. Inténtalo de nuevo.`;
    img.style.display = 'none'; img.classList.remove('img-zoom');
    sfxLose.play().catch(()=>{}); overlay.classList.add('show');
  }
  </script>
</body>
</html>
